<?php

namespace App\Services\Surat;

use PDF;
use Carbon\Carbon;
use App\Models\StatusSurat;
use App\Models\SuratGenerated;
use App\Models\PermohonanSurat;
use Illuminate\Support\Facades\Storage;
use SimpleSoftwareIO\QrCode\Facades\QrCode;

class SuratGeneratorService
{
    /**
     * Create a new class instance.
     */
    public function __construct()
    {
        //
    }

    public function generateSurat(PermohonanSurat $permohonan, array $options = []): SuratGenerated
    {
        // Validasi permohonan sudah bisa diproses
        if (!$this->canGenerateSurat($permohonan)) {
            throw new \Exception('Permohonan belum bisa diproses menjadi surat');
        }

        // Data untuk surat
        $data = $this->prepareSuratData($permohonan, $options);

        // Generate PDF
        $pdfPath = $this->generatePDF($permohonan, $data);

        // Generate QR Code
        $qrCodePath = $this->generateQRCode($permohonan, $data);

        // Simpan ke database
        $suratGenerated = SuratGenerated::create([
            'permohonan_id' => $permohonan->id,
            'file_path' => $pdfPath,
            'qr_code_path' => $qrCodePath,
            'tanggal_terbit' => now()->toDateString(),
            'berlaku_sampai' => $options['berlaku_sampai'] ?? null,
            'ditandatangani_oleh' => $options['ditandatangani_oleh'] ?? 'Kepala Desa',
            'jabatan_penandatangan' => $options['jabatan_penandatangan'] ?? 'Kepala Desa',
        ]);

        // Update status permohonan menjadi selesai
        $permohonan->update([
            'status_id' => StatusSurat::where('kode_status', 'SLS')->first()->id,
            'tanggal_selesai' => now(),
        ]);

        return $suratGenerated;
    }

    private function canGenerateSurat(PermohonanSurat $permohonan): bool
    {
        // Cek apakah semua dokumen wajib sudah diupload dan diverifikasi
        $dokumenWajib = $permohonan->jenisSurat->dokumenPersyaratan()->where('is_wajib', true)->count();
        $dokumenTerverifikasi = $permohonan->uploadDokumen()
            ->whereHas('dokumenPersyaratan', function($query) {
                $query->where('is_wajib', true);
            })
            ->where('is_verified', true)
            ->count();

        return $dokumenWajib === $dokumenTerverifikasi;
    }

    private function prepareSuratData(PermohonanSurat $permohonan, array $options): array
    {
        return [
            'permohonan' => $permohonan,
            'jenis_surat' => $permohonan->jenisSurat,
            'nagari' => $permohonan->nagari,
            'pemohon' => [
                'nik' => $permohonan->pemohon_nik,
                'nama' => $permohonan->pemohon_nama,
                'alamat' => $permohonan->pemohon_alamat,
                'telepon' => $permohonan->pemohon_telepon,
            ],
            'keperluan' => $permohonan->keperluan,
            'tanggal_terbit' => Carbon::now()->format('d F Y'),
            'penandatangan' => [
                'nama' => $options['ditandatangani_oleh'] ?? 'Kepala Desa',
                'jabatan' => $options['jabatan_penandatangan'] ?? 'Kepala Desa',
            ],
            'nomor_surat' => '', // Will be generated by model
        ];
    }

    private function generatePDF(PermohonanSurat $permohonan, array $data): string
    {
        $templatePath = $permohonan->jenisSurat->template_path ?? 'surat.default';

        $pdf = PDF::loadView("templates.surat.{$templatePath}", $data);
        $pdf->setPaper('A4', 'portrait');

        $fileName = "surat_{$permohonan->jenisSurat->kode_surat}_{$permohonan->id}_" . time() . ".pdf";
        $filePath = "surat-generated/{$fileName}";

        Storage::put($filePath, $pdf->output());

        return $filePath;
    }

    // private function generateQRCode(PermohonanSurat $permohonan, array $data): string
    // {
    //     $verificationUrl = url("/verify-surat/{$permohonan->nomor_permohonan}");

    //     $qrCode = QrCode::format('png')
    //         ->size(200)
    //         ->generate($verificationUrl);

    //     $fileName = "qr_surat_{$permohonan->id}_" . time() . ".png";
    //     $filePath = "qr-codes/{$fileName}";

    //     Storage::put($filePath, $qrCode);

    //     return $filePath;
    // }

    public function regenerateSurat(SuratGenerated $suratGenerated, array $options = []): SuratGenerated
    {
        // Hapus file lama
        if (Storage::exists($suratGenerated->file_path)) {
            Storage::delete($suratGenerated->file_path);
        }

        if ($suratGenerated->qr_code_path && Storage::exists($suratGenerated->qr_code_path)) {
            Storage::delete($suratGenerated->qr_code_path);
        }

        // Generate ulang
        return $this->generateSurat($suratGenerated->permohonanSurat, $options);
    }
}